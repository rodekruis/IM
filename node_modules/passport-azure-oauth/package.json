{
  "name": "passport-azure-oauth",
  "description": "Azure OAuth2 strategy fÃ¼r Passport and node.js",
  "version": "0.0.3",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/passport-azure-oauth",
  "author": {
    "name": "Thomas Herbst",
    "email": "thomas.herbst@queport.com"
  },
  "dependencies": {
    "pkginfo": "0.2.x",
    "passport-oauth": "0.1.x",
    "passport-strategy": "1.0.0",
    "oauth": "0.9.x",
    "jwt-simple": "0.1.x"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/QuePort/passport-azure-oauth.git"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "keywords": [
    "passport",
    "oauth",
    "oauth2",
    "auth",
    "authn",
    "authentication",
    "azure",
    "exchange"
  ],
  "readme": "# Passport-Azure-OAuth\r\n\r\n[Passport](http://passportjs.org/) strategy for authenticating with [Azure](https://login.windows.net/common/oauth2) OAuth 2.0 API.\r\n\r\nThis module lets you authenticate using Azure in your Node.js applications.\r\nBy plugging into Passport, Azure / Office 365 authentication can be easily and unobtrusively integrated into any application or framework that supports [Connect](http://www.senchalabs.org/connect/)-style middleware, including [Express](http://expressjs.com/).\r\n\r\n## Installation\r\n\r\n    $ npm install passport-azure-oauth\r\n\r\n## Usage\r\n\r\n#### Configure Strategy\r\n\r\nThe Azure authentication strategy authenticates users using a Azure / Microsoft Office 365\r\naccount using OAuth 2.0.  The strategy requires a `verify` callback, which\r\naccepts these credentials and calls `done` providing a user, as well as\r\n`options` specifying a client ID, client secret, tenant id, resource and redirect URL.\r\n\r\n    passport.use(new AzureOAuthStrategy({\r\n        clientId\t: AzureOAuth_ClientId,\r\n    \tclientSecret: AzureOAuth_ClientSecret,\r\n\t\ttenantId \t: AzureOAuth_AppTenantId,\r\n\t\tresource \t: AzureOAuth_AuthResource,\r\n\t\tredirectURL : AzureOAuth_RedirectURL,\r\n\t\tproxy : {\r\n\t\t\thost : 'myProxyHost',\r\n\t\t\tport : 'myProxyPort',\r\n\t\t\tprotocol : 'https' // http / https\r\n\t\t}\r\n      },\r\n      function(accessToken, refreshToken, profile, done) {\r\n      \treturn done(err, user);\r\n      }\r\n    ));\r\n\r\n* clientId : Id of the registered azure online application.\r\n* clientSecret : Password of the registered azure online application.\r\n* tenantId : Open Azure Online, navigate to the application, click on \"VIEW ENDPOINTS\", copy the GUID after the host url.\r\n* resource : Url to the Azure / Office 365 resource your app wants to access.\r\n\t* e.g.: \"https://outlook.office365.com/\" to access Office 365 Mail Api\r\n* redirectURL : The redirect url after the authentication. </br>\r\nYou can pass additional parameters to your \"passport use\", to work with them in your callback action.\r\nAll parameters given in the new AzureOAuthStrategy({ }) will be passed to your redirectURL.\r\nE.g \r\n\t```javascript  \r\n\r\n        clientId\t: AzureOAuth_ClientId,\r\n    \tclientSecret: AzureOAuth_ClientSecret,\r\n\t\ttenantId \t: AzureOAuth_AppTenantId,\r\n\t\tresource \t: AzureOAuth_AuthResource,\r\n\t\tredirectURL : AzureOAuth_RedirectURL,\r\n\t\tproxy : {\r\n\t\t\thost : 'myProxyHost',\r\n\t\t\tport : 'myProxyPort',\r\n\t\t\tprotocol : 'https' // http / https\r\n\t\t},\r\n\t\tmyParameter : 'Im a parameter'\r\n\r\n    ));\r\n\t```  \r\n\r\nThe callback url looks like <br>\r\n\t\r\n\t\"redirectURL + '?redirectUrl=' + redirectUrl + \"&\" + myParameter=\"Im a parameter\"\r\n\r\n* The proxy settings passed through the oauth2 module, wich handles the authorization requests.\r\n\r\n#### Authenticate Requests\r\n\r\nUse `passport.authenticate()`, specifying the `'azureOAuth'` strategy, to\r\nauthenticate requests.\r\n\r\nFor example, as route middleware in an [Express](http://expressjs.com/)\r\napplication:\r\n\r\n    app.get('/auth/azureOAuth',\r\n      passport.authenticate('azureOAuth'),\r\n      function(req, res){\r\n        // The request will be redirected to SharePoint for authentication, so\r\n        // this function will not be called.\r\n      });\r\n\r\n    app.get('/auth/azureOAuth/callback', \r\n      passport.authenticate('azureOAuth', { \r\n\t\tfailureRedirect: '/login',\r\n\t\trefreshToken: azureOAuth_RefreshToken \r\n\t  }),\r\n      function(req, res) {\r\n        // Successful authentication, redirect home.\r\n        res.redirect('/');\r\n      });\r\n\r\n* refreshToken : After one initial authentication, you get a refresh token. You can pass it to the authenticate method to simply renew your access token without a new callback.\r\n## Credits\r\n\r\n  - [QuePort](https://github.com/QuePort)\r\n  - [Thomas Herbst](https://github.com/macrauder)\r\n  - [Tobias Winkler](https://github.com/Tschuck)\r\n\r\n## License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2013 Thomas Herbst / QuePort\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/QuePort/passport-azure-oauth/issues"
  },
  "homepage": "https://github.com/QuePort/passport-azure-oauth",
  "_id": "passport-azure-oauth@0.0.3",
  "_shasum": "fb0bcd652a6eefbbd669141e56b4d4fd277b9c33",
  "_from": "passport-azure-oauth@",
  "_resolved": "https://registry.npmjs.org/passport-azure-oauth/-/passport-azure-oauth-0.0.3.tgz"
}
